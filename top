module top (
    input clk, 
    input rst,
    inout [7:0] key_io,
    output reg [7:0] seg_data, 
    output reg [5:0] seg_com
  );

    wire clk_6mhz, clk_1khz;
    wire [4:0] key_out, key_out_debounced;
    wire [3:0] key;
    wire key_pressed;
    reg [3:0] count, key_reg; 
    wire [6:0] dec7_out [0:5], dec7_in [0:5]; 
    reg [3:0]  A[0:5], B[0:5], C[0:5]; //A,B 입력받는 값 C 출력//
  

    reg add, sub, mul,div, equal; 
    reg [31:0] A_decimal, B_decimal; // 연산을 하기 위해 선언된 10진수 숫자//
    reg  [31:0] C_decimal; // a와b를 연산한 값 //
   
    
    clk_wiz_0 clk_inst (clk_6mhz, rst, , clk);    
    clk_divider #(.DIVISOR(6000)) clk_div_inst (clk_6mhz, clk_1khz); 

    keypad keypad_inst (clk_6mhz, rst, key_io[7:4], key_io[3:0], key_out); 
    debounce #(.SIZE(16)) debounce_inst (clk_6mhz, rst, key_out, key_out_debounced); 
    
    assign key_pressed = key_out_debounced[4]; //key_pressed becomes '1' only for 1 cycle
    assign key = key_out_debounced[3:0]; 

always @(posedge clk_6mhz or posedge rst)  //A를 숫자를 한 개씩 입력받으면 한 비트씩 shift한다( 연산자들이 입력 받지않았을 때만)//
   begin
        if(rst) begin
             A[0] <= 0;
             A[1] <= 0;
             A[2] <= 0;
             A[3] <= 0;
             A[4] <= 0;
             A[5] <= 0; 
           

        end

        
        else if (key_pressed ==1 && (key<10)  && (add == 0 && sub==0 && mul==0 && div==0)) begin 
        A[0] <= key;
        A[1] <= A[0];
        A[2] <= A[1];
        A[3] <= A[2];
        A[4] <= A[3];
        A[5] <= A[4]; 
      
        end
        else if(key_pressed == 1 && key == 4'hF ) begin // 키패드의 F키를 누르면 입력받은 A값을 초기화함//
        A[0] <= 0;
        A[1] <= 0;
        A[2] <= 0;
        A[3] <= 0;
        A[4] <= 0;
        A[5] <= 0; 
        end        
     end
     
     
     always @(posedge clk_6mhz or posedge rst)  
        begin
             if(rst) begin
             B[0] <= 0;
             B[1] <= 0;
             B[2] <= 0;
             B[3] <= 0;
             B[4] <= 0;
             B[5] <= 0; 
                
             end
             

         else if (key_pressed ==1 && (key<10) && add ==1 ) begin // 연산자를 입력 받으면 B를 A와같이 shift하면서 입력받는다//
             B[0] <= key;
             B[1] <= B[0];
             B[2] <= B[1];
             B[3] <= B[2];
             B[4] <= B[3];
             B[5] <= B[4]; 
           
             end
            else if (key_pressed ==1 && (key<10) && sub ==1) begin
             B[0] <= key;
             B[1] <= B[0];
             B[2] <= B[1];
             B[3] <= B[2];
             B[4] <= B[3];
             B[5] <= B[4]; 
           
             end
        else if (key_pressed ==1 && (key<10) && mul ==1) begin
             B[0] <= key;
             B[1] <= B[0];
             B[2] <= B[1];
             B[3] <= B[2];
             B[4] <= B[3];
             B[5] <= B[4]; 
                       
                   end
             else if (key_pressed ==1 && (key<10) && div ==1) begin
             B[0] <= key;
             B[1] <= B[0];
             B[2] <= B[1];
             B[3] <= B[2];
             B[4] <= B[3];
             B[5] <= B[4]; 
                                   
                                     end
              else if(key_pressed == 1 && key == 4'hF ) begin //키패드 F를 누르면 초기화//
             B[0] <= 0;
             B[1] <= 0;
             B[2] <= 0;
             B[3] <= 0;
             B[4] <= 0;
             B[5] <= 0; 
            end
          end
          
//       always @*  begin
//          A_decimal = A[0] + A[1]*10 + A[2]*100 + A[3]*1000 + A[4]*10000 +A[5]*100000; //한 비트씩 입력받은 A값을 각각의 자릿수를 곱하여 10진수를 만들어준다//
//          B_decimal = B[0] + B[1]*10 + B[2]*100 + B[3]*1000 + B[4]*10000 +B[5]*100000;
         
//       end 

       always @*  begin
          A_decimal = A[0] + A[1]*10 + A[2]*100 + A[3]*1000 + A[4]*10000 +A[5]*100000; //한 비트씩 입력받은 A값을 각각의 자릿수를 곱하여 10진수를 만들어준다//
          B_decimal = B[0] + B[1]*10 + B[2]*100 + B[3]*1000 + B[4]*10000 +B[5]*100000;
         
       end 
       
     always @(*)  
   begin
        if (add == 1 && equal == 1 ) begin  // 연산자와 = 기호를 누르면 연산을한다//
               C_decimal = A_decimal + B_decimal;
                end
         else if (sub ==1 && equal == 1) begin
               C_decimal = A_decimal - B_decimal;
                end
         else if (mul ==1 && equal == 1) begin
                C_decimal = A_decimal * B_decimal;
                end
         else if (div ==1 && equal == 1) begin
                C_decimal = A_decimal / B_decimal;
                end 
           else  C_decimal = 0;
       end         
     always @ (*) begin 
        if(C_decimal < 10) begin  //계산된 C_decimal을 다시 0~5비트까지 /,%를 이용하여 C값에 각각 넣어준다//
            C[0] =  C_decimal;
            C[1] = 0;
            C[2] = 0;
            C[3] = 0;
            C[4] = 0;
            C[5] = 0;
            end
         else if (C_decimal < 100) begin
             C[0] =  C_decimal % 10;
             C[1] =  C_decimal / 10;
             C[2] = 0;
             C[3] = 0;
             C[4] = 0;
             C[5] = 0;
              end          
         else if (C_decimal < 1000) begin
             C[0] =  C_decimal % 10;
             C[1] =  (C_decimal / 10) % 10;
             C[2] =  C_decimal / 100;
             C[3] = 0;
             C[4] = 0;
             C[5] = 0;
              end          
         else if (C_decimal < 10000) begin
             C[0] =  C_decimal % 10;
             C[1] =  (C_decimal / 10) % 10;
             C[2] =  (C_decimal / 100) % 10;
             C[3] =  C_decimal / 1000;
             C[4] =  0;
             C[5] =  0;
               end                  
         else if (C_decimal < 100000) begin
                       C[0] =  C_decimal % 10;
                       C[1] =  (C_decimal / 10) % 10;
                       C[2] =  (C_decimal / 100) % 10;
                       C[3] =  (C_decimal / 1000) % 10;
                       C[4] =  C_decimal / 10000;
                       C[5] =  0;
                 end 
                 
                  else if (C_decimal < 1000000) begin
                                       C[0] =  C_decimal % 10;
                                       C[1] =  (C_decimal / 10) % 10;
                                       C[2] =  (C_decimal / 100) % 10;
                                       C[3] =  (C_decimal / 1000) % 10;
                                       C[4] =  (C_decimal / 10000) % 10;
                                       C[5] =  C_decimal / 100000;
                                 end 
               else if(key_pressed == 1 && key == 4'hF ) begin //키패드 F를 누르면 C값 초기화//
                                        C[0] = 0;
                                        C[1] = 0;
                                        C[2] = 0;
                                        C[3] = 0;
                                        C[4] = 0;
                                        C[5] = 0; 
                                        end
          else  begin
                       C[0] = 0;
                       C[1] = 0;
                       C[2] = 0;
                       C[3] = 0;
                       C[4] = 0;
                       C[5] = 0;                      
 
 end
 end                        
                         
              always @(posedge clk_6mhz or posedge rst)  
                            begin
                                 if(rst) add <= 0;
                            else if(key_pressed == 1 && key == 4'hF ) add <=0;  //키가 눌리고 F를 누르면 add초기화//
                            else if(key_pressed == 1 && key == 4'hD ) add <=1; //키가눌리고 키패드의 각각 맞는 연산자를 누르면 연산자의 변수가 1이된다//
                            end     
                    
                   always @(posedge clk_6mhz or posedge rst)  
                              begin
                                 if(rst) sub <= 0;
                            else if(key_pressed == 1 && key == 4'hF ) sub <=0;
                            else if(key_pressed == 1 && key == 4'hC ) sub <=1;
                            end                   
                    always @(posedge clk_6mhz or posedge rst)  
                              begin
                                 if(rst) mul <= 0;
                             else if(key_pressed == 1 && key == 4'hF ) mul <=0;
                             else if(key_pressed == 1 && key == 4'hB ) mul <=1;
                                       end                                 
                            
                     always @(posedge clk_6mhz or posedge rst)  
                                 begin
                                 if(rst) div <= 0;
                                 else if(key_pressed == 1 && key == 4'hF ) div <=0;
                                 else if(key_pressed == 1 && key == 4'hA ) div <=1;
                                   end
                                 
                           
                      always @(posedge clk_6mhz or posedge rst)  
                            begin
                                 if(rst) equal <= 0;
                            else if(key_pressed == 1 && key == 4'hF ) equal <=0;
                            else if(key_pressed == 1 && key == 4'hE ) equal <=1;
                            end     
    
 //세그먼트에 equal이 1이면  dec7_in[0]에 c[0]이 표시되고 아니라면 연산자가 1이라면 B가 표시되고 아니면 A가 표시된다// 
 
     assign dec7_in[0] = (equal==1)? C[0] : ((add==1)||(sub==1)||(mul==1)||(div==1))?  B[0]: A[0]; 
     assign dec7_in[1] = (equal==1)? C[1] : ((add==1)||(sub==1)||(mul==1)||(div==1))?  B[1]: A[1];
     assign dec7_in[2] = (equal==1)? C[2] : ((add==1)||(sub==1)||(mul==1)||(div==1))?  B[2]: A[2];
     assign dec7_in[3] = (equal==1)? C[3] : ((add==1)||(sub==1)||(mul==1)||(div==1))?  B[3]: A[3];
     assign dec7_in[4] = (equal==1)? C[4] : ((add==1)||(sub==1)||(mul==1)||(div==1))?  B[4]: A[4];
     assign dec7_in[5] = (equal==1)? C[5] : ((add==1)||(sub==1)||(mul==1)||(div==1))?  B[5]: A[5];
  
     
    
    dec7 dec7_inst0 (dec7_in[0], dec7_out[0]); 
    dec7 dec7_inst1 (dec7_in[1], dec7_out[1]); 
    dec7 dec7_inst2 (dec7_in[2], dec7_out[2]); 
    dec7 dec7_inst3 (dec7_in[3], dec7_out[3]); 
    dec7 dec7_inst4 (dec7_in[4], dec7_out[4]); 
    dec7 dec7_inst5 (dec7_in[5], dec7_out[5]); 
           
    
        always @* begin
        case (seg_com)
            6'b100000: seg_data = {dec7_out[0], 1'b0};
            6'b010000: seg_data = {dec7_out[1], 1'b0};
            6'b001000: seg_data = {dec7_out[2], 1'b0};
            6'b000100: seg_data = {dec7_out[3], 1'b0};
            6'b000010: seg_data = {dec7_out[4], 1'b0};
            6'b000001: seg_data = {dec7_out[5], 1'b0};
            default: seg_data = 8'b0; 
        endcase
    end
    
    always @(posedge clk_1khz or posedge rst)  // LED를 동시에 켜기 위하여 clk마다 계속 left shift
    begin
        if(rst) seg_com <= 6'b100000; 
        else seg_com <= {seg_com[0], seg_com[5:1]}; 
    end

endmodule
